x=gsub(",?", "", x)
# Erase ellipsis
x=gsub("\\.{3,}", "", x)
# Erase colon
x=gsub("\\:", "", x)
# Merge on contractions (apostrophe):
x=gsub("\\'", "", x)
# Erase |:
x=gsub("\\|", "", x)
# Erase {}:
x=gsub("\\{", "", x)
x=gsub("\\}", "", x)
# Erase []:
x=gsub("\\[|\\]","",x)
##### SENTENCE SPLITTING AND CLEANUP
# Split into sentences only on single periods or any amount of question marks or exclamation marks and -
# ok here is where you change structure fundamentally...
# Faster if I unlist once? no i guess it keeps getting relisted.
x<-strsplit(unlist(x),"[\\.]{1}")
x<-strsplit(unlist(x),"\\?+")
x<-strsplit(unlist(x),"\\!+")
x<-strsplit(unlist(x),"\\-+")
# Split also on parentheses
x<-strsplit(unlist(x),"\\(+")
x<-strsplit(unlist(x),"\\)+")
# split also on quotation marks
x<-strsplit(unlist(x),"\\\"")
# remove spaces at start and end of sentences:
# HERE is where the problem begins. why?
x<-gsub("^\\s+", "", unlist(x))
x<-gsub("\\s+$", "", unlist(x))
# Replace ~ and any whitespace around with just one space
x<-gsub("\\s*~\\s*", " ", unlist(x))
# Replace forward slash with space
x<-gsub("\\/", " ", unlist(x))
# Replace + signs with space
x<-gsub("\\+", " ", unlist(x))
# it s a
x<-gsub("it s ", "its ", unlist(x))
# 'i m not'
x<-gsub("i m not", "im not", unlist(x))
# 'i didn t'
x<-gsub("i didn t", "i didnt", unlist(x))
# 'i don t'
x<-gsub("i don t", "i dont", unlist(x))
# ' i m '
x<-gsub(" i m ", " im ", unlist(x))
# Eliminate empty and single letter values (more?)
# x=x[which(nchar(x)!=1)]
x=x[which(nchar(x)!=0)]
x = tolower(x)
#eliminate more than one space
gsub("\\s+"," ",x)
}
tokens <- unlist(strsplit(all_sample, "[^a-z]+"))
tokens <- tokens[tokens != ""]
tokens <- process(tokens)
tokens2 <- c(tokens[-1], ".")
tokens3 <- c(tokens2[-1], ".")
tokens4 <- c(tokens3[-1], ".")
bigrams <- paste(tokens,tokens2)
freq1 <- sort(table(bigrams),decreasing = T)
trigrams <- paste(tokens, tokens2, tokens3)
freq2 <- sort(table(trigrams),decreasing = T)
quadrigrams <- paste(tokens, tokens2, tokens3, tokens4)
freq3 <- sort(table(quadrigrams),decreasing = T)
getwd()
save(freq1, file='freq1.RData')
save(freq2, file='freq2.RData')
save(freq3, file='freq3.RData')
load('freq1.RData')
load('freq2.RData')
load('freq3.RData')
k
x
x <- process_x(x)
x
bigramPred(x)
head(freq1)
head(freq1,n=100)
k <- "didn't'"
process(k)
k <- "i'm"
process(k)
head(tokens)
head(tokens,n=100)
all_sample <- paste(c(t_sample, b_sample, n_sample))
head(all_sample)
i <- head(all_sample)
tokens_i <- unlist(strsplit(i, "[^a-z]+"))
tokens_i
tolower(i)
all_sample <- tolower(paste(c(t_sample, b_sample, n_sample)))
i <- head(all_sample)
tokens_i <- unlist(strsplit(i, "[^a-z]+"))
tokens_i
ik <- process(tokens_i)
ik
process("it's")
process("she's")
strsplit(i,"[^a-z]+")
strsplit(i," ")
unlist(strsplit(i, "[^a-z']+"))
strsplit(i," ")
tokens <- unlist(strsplit(i, " "))
tokens <- tokens[tokens != ""]
tokens <- process(tokens)
tokens
tokens <- unlist(strsplit(all_sample, " "))
tokens <- tokens[tokens != ""]
tokens <- process(tokens)
tokens2 <- c(tokens[-1], ".")
tokens3 <- c(tokens2[-1], ".")
tokens4 <- c(tokens3[-1], ".")
bigrams <- paste(tokens,tokens2)
freq1 <- sort(table(bigrams),decreasing = T)
trigrams <- paste(tokens, tokens2, tokens3)
freq2 <- sort(table(trigrams),decreasing = T)
quadrigrams <- paste(tokens, tokens2, tokens3, tokens4)
freq3 <- sort(table(quadrigrams),decreasing = T)
save(freq1, file='freq1.RData')
save(freq2, file='freq2.RData')
save(freq3, file='freq3.RData')
load('freq1.RData')
load('freq2.RData')
load('freq3.RData')
x
x <= "I"
x <- "I"
process_x(x)
x
x <- process_x(x)
x
bigramPred(x)
x <- "i have"
trigramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 2)
bigram=paste(test[1], test[2])
Xpred=freq2[grep(pattern = paste0("^",bigram," "),x = names(freq2))]
Xpred = names(Xpred[1])
paste(bigram, "[",substr(Xpred,nchar(bigram)+ 2,nchar(Xpred)),"]")
}
trigramPred(x)
quadgramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 3)
trigram=paste(test[1], test[2], test[3])
Xpred=freq3[grep(pattern = paste0("^",trigram," "),x = names(freq3))]
Xpred = names(Xpred[1])
paste(trigram, "[",substr(Xpred,nchar(trigram)+ 2,nchar(Xpred)),"]")
}
x <- "i have a"
quadgramPred(x)
x <- "i like"
quadgramPred(x)
4_words <- quadgramPred(x)
words_4 <- quadgramPred(x)
is.null(words_4)
is.null(words_4[4])
words_4[3]
words_4[1]
words_4[2]
Xpred
x
test <- tail(strsplit(x, " ")[[1]], 3)
trigram=paste(test[1], test[2], test[3])
test
trigram
Xpred=freq3[grep(pattern = paste0("^",trigram," "),x = names(freq3))]
Xpred
Xpred = names(Xpred[1])
Xpred
quadgramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 3)
trigram=paste(test[1], test[2], test[3])
Xpred=freq3[grep(pattern = paste0("^",trigram," "),x = names(freq3))]
Xpred = names(Xpred[1])
k <- paste(trigram, "[",substr(Xpred,nchar(trigram)+ 2,nchar(Xpred)),"]")
}
words_4 <- quadgramPred(x)
words_4
quadgramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 3)
trigram=paste(test[1], test[2], test[3])
Xpred=freq3[grep(pattern = paste0("^",trigram," "),x = names(freq3))]
Xpred = names(Xpred[1])
paste(trigram, "[",substr(Xpred,nchar(trigram)+ 2,nchar(Xpred)),"]")
}
words_4
words_4[1][3]
words_4[1][1]
words_4[[1]]
words_4[[1]][1]
words_4[[1]][2]
class(words_4)
unlist(words_4)
strsplit(words_4)
strsplit(words_4," ")
k <- strsplit(words_4," ")
k[1]
k[1][1]
k
words_4
tail(strsplit(x, " ")[[1]], 3)
tail(strsplit(x, " ")[[1]], 4)
tail(strsplit(x, " ")[[1]], 1)
tail(strsplit(x, " ")[[2]], 1)
strsplit(x, " ")
x
tail(strsplit(words_4, " ")[[2]], 1)
tail(strsplit(words_4, " ")[[1]], 1)
tail(strsplit(words_4, " ")[[1]], 2)
tail(strsplit(words_4, " ")[[1]], 3)
strsplit(words_4, " ")
strsplit(words_4, " ")[5]
strsplit(words_4, " ")[[5]]
?substr
substr(words_4,3,4)
substr(words_4,"[",4)
words_4[grep(pattern = "[")]
words_4[grep(pattern = "["),x=words_4]
words_4
words_4[grep(pattern = "[",x = words_4)]
words_4[grep(pattern = "/[",x = words_4)]
words_4[grep(pattern = "//[",x = words_4)]
words_4[grep(pattern = "\\[",x = words_4)]
substr(words_4,start = words_4[grep(pattern = "\\[",x = words_4)],stop = words_4[grep(pattern = "\\]",x = words_4)])
x <- "i like to"
words_4 <- quadgramPred(x)
substr(words_4,start = words_4[grep(pattern = "\\[",x = words_4)],stop = words_4[grep(pattern = "\\]",x = words_4)])
words_4
unlist(words_4)
strsplit(unlist(words_4)," ")
gsub(.*\\#(\\w*)\\..*)
gsub(".*\\#(.*)\\..*", "\\1", c("HelloWorld#you.txt"))
gsub(.*\\[(\\w*)\\].*),words_4))
gsub(".*\\[(\\w*)\\].*)",words_4))
gsub(".*\\[(\\w*)\\].*)",words_4)
gsub(".*\\#(\\w*)\\..*", "\\1", c("HelloWorld#you.txt"))
gsub(".*\\#(\\w*)\\..*", "\\1", words_4)
gsub(".*\\[(\\w*)\\..*", "\\1", words_4)
gsub(".*\\[(\\w*)\\].*", "\\1", words_4)
gsub(".*\\[(\\w*)\\].*", words_4)
?gsub
gsub(".*\\[(\\w*)\\].*", x = words_4)
gsub(".*\\[(\\w*)\\].*", "\\1", words_4)
gsub(".*\\[(\\w*)\\].*", "\\2", words_4)
gsub(".*\\[(\\w*)\\].*", "\\1", words_4)
class(words_4)
grep(pattern = ".*\[\s(\w+)\s\]",x = words_4)
grep(pattern = ".*\\[\s(\w+)\s\\]",x = words_4)
grep(pattern = ".*\\[\\s(\\w+)\\s\\]",x = words_4)
words_4[grep(pattern = ".*\\[\\s(\\w+)\\s\\]",x = words_4)]
gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_4)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_4)
is.na(k)
k <- "NA"
is.na(k)
k <- "i like"
process_x(k)
x <- process_x(k)
quadgramPred(x)
words_4 <- quadgramPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_4)
is.na(k)
k
is.null(k)
k = "NA"
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_4)
k == "NA"
if (k != "NA") {
words_4
}
k != "NA"
x <- "i like to"
process_x(x)
words_4 <- quadgramPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_4)
k != "NA"
getPred=function(x){
process_x(x)
words_4 <- quadgramPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_4)
if (k != "NA") {
words_4
} else {
words_3 <- trigramPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_3)
if (k != "NA") {
words_3
} else {
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_2)
if (k != "NA") {
words_2
} else {
'the'
}
}
}
}
getPred("i like")
getPred("i like to")
getPred("i")
getPred=function(x){
process_x(x)
words_4 <- quadgramPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_4)
if (k != "NA") {
words_4
} else {
words_3 <- trigramPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_3)
if (k != "NA") {
words_3
} else {
words_2 <- biPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_2)
if (k != "NA") {
words_2
} else {
'the'
}
}
}
}
getPred("i")
getPred=function(x){
process_x(x)
words_4 <- quadgramPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_4)
if (k != "NA") {
words_4
} else {
words_3 <- trigramPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_3)
if (k != "NA") {
words_3
} else {
words_2 <- bigramPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_2)
if (k != "NA") {
words_2
} else {
'the'
}
}
}
}
getPred("i")
getPred("")
getPred(" ")
getPred=function(x){
process_x(x)
words_4 <- quadgramPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_4)
if (k != "NA") {
words_4
} else {
words_3 <- trigramPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_3)
if (k != "NA") {
words_3
} else {
words_2 <- bigramPred(x)
k <- gsub(pattern = ".*\\[\\s(\\w+)\\s\\]","\\1",x = words_2)
if (k != "NA") {
words_2
} else {
'not found'
}
}
}
}
getPred(" ")
library(shiny)
library(stringr)
library(tm)
library(RWeka)
runApp()
runApp()
x <- i like to
x <- "i like to"
test <- tail(strsplit(x, " ")[[1]], 1)
unigram=paste(test[1])
Xpred=freq1[grep(pattern = paste0("^",unigram," "),x = names(freq1))]
Xpred = names(Xpred[1])
Xpred
test <- tail(strsplit(x, " ")[[1]], 3)
trigram=paste(test[1], test[2], test[3])
Xpred=freq3[grep(pattern = paste0("^",trigram," "),x = names(freq3))]
Xpred = names(Xpred[1])
Xpred
paste("[",substr(Xpred,nchar(trigram)+ 2,nchar(Xpred)),"]")
bigramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 1)
unigram=paste(test[1])
Xpred=freq1[grep(pattern = paste0("^",unigram," "),x = names(freq1))]
Xpred = names(Xpred[1])
paste("[",substr(Xpred,nchar(unigram)+ 2,nchar(Xpred)),"]")
}
trigramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 2)
bigram=paste(test[1], test[2])
Xpred=freq2[grep(pattern = paste0("^",bigram," "),x = names(freq2))]
Xpred = names(Xpred[1])
paste("[",substr(Xpred,nchar(bigram)+ 2,nchar(Xpred)),"]")
}
quadgramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 3)
trigram=paste(test[1], test[2], test[3])
Xpred=freq3[grep(pattern = paste0("^",trigram," "),x = names(freq3))]
Xpred = names(Xpred[1])
paste("[",substr(Xpred,nchar(trigram)+ 2,nchar(Xpred)),"]")
}
paste(substr(Xpred,nchar(unigram)+ 2,nchar(Xpred)))
paste(substr(Xpred,nchar(trigram)+ 2,nchar(Xpred)))
bigramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 1)
unigram=paste(test[1])
Xpred=freq1[grep(pattern = paste0("^",unigram," "),x = names(freq1))]
Xpred = names(Xpred[1])
paste(substr(Xpred,nchar(unigram)+ 2,nchar(Xpred)))
}
trigramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 2)
bigram=paste(test[1], test[2])
Xpred=freq2[grep(pattern = paste0("^",bigram," "),x = names(freq2))]
Xpred = names(Xpred[1])
paste("[",substr(Xpred,nchar(bigram)+ 2,nchar(Xpred)),"]")
}
quadgramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 3)
trigram=paste(test[1], test[2], test[3])
Xpred=freq3[grep(pattern = paste0("^",trigram," "),x = names(freq3))]
Xpred = names(Xpred[1])
paste(substr(Xpred,nchar(trigram)+ 2,nchar(Xpred)))
}
getPred=function(x){
process_x(x)
words_4 <- quadgramPred(x)
if (words_4 != "NA") {
words_4
} else {
words_3 <- trigramPred(x)
if (words_3 != "NA") {
words_3
} else {
words_2 <- bigramPred(x)
if (words_2 != "NA") {
words_2
} else {
'not found'
}
}
}
}
getPred("i like")
bigramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 1)
unigram=paste(test[1])
Xpred=freq1[grep(pattern = paste0("^",unigram," "),x = names(freq1))]
Xpred = names(Xpred[1])
paste(substr(Xpred,nchar(unigram)+ 2,nchar(Xpred)))
}
trigramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 2)
bigram=paste(test[1], test[2])
Xpred=freq2[grep(pattern = paste0("^",bigram," "),x = names(freq2))]
Xpred = names(Xpred[1])
paste(substr(Xpred,nchar(bigram)+ 2,nchar(Xpred)))
}
quadgramPred <- function(x) {
test <- tail(strsplit(x, " ")[[1]], 3)
trigram=paste(test[1], test[2], test[3])
Xpred=freq3[grep(pattern = paste0("^",trigram," "),x = names(freq3))]
Xpred = names(Xpred[1])
paste(substr(Xpred,nchar(trigram)+ 2,nchar(Xpred)))
}
getPred("i like")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
